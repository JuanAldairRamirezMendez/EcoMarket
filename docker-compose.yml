version: '3.9'

services:
  # Base de datos PostgreSQL para desarrollo local
  postgres:
    image: postgres:15
    container_name: ecomarket-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-devuser}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-devpass}
      POSTGRES_DB: ${POSTGRES_DB:-ecomarket_dev}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - ecomarket-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-devuser} -d ${POSTGRES_DB:-ecomarket_dev}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis para cach√© y sesiones
  redis:
    image: redis:7-alpine
    container_name: ecomarket-redis-dev
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - ecomarket-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend NestJS (para desarrollo)
  backend:
    build:
      context: ./apps/backend
      dockerfile: Dockerfile.dev
    container_name: ecomarket-backend-dev
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME}
      - REDIS_URL=redis://redis:6379
    ports:
      - "${BACKEND_PORT:-3000}:3000"
    volumes:
      - ./apps/backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ecomarket-network
    profiles:
      - full

  # Frontend Angular (para desarrollo)
  frontend:
    build:
      context: ./apps/frontend
      dockerfile: Dockerfile.dev
    container_name: ecomarket-frontend-dev
    restart: unless-stopped
    environment:
      - NODE_ENV=development
    ports:
      - "${FRONTEND_PORT:-4200}:4200"
    volumes:
      - ./apps/frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - ecomarket-network
    profiles:
      - full

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  ecomarket-network:
    driver: bridge
